const { responses } = require('../utils/responses');
const { getData, saveData } = require('../utils/helpers');

async function noorgooddayCommand(ctx) {
  try {
    const chatId = ctx.chat.id;
    const data = await getData() || {}; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined
    const today = new Date().toISOString().split('T')[0];

    if (data.lastResponseDate === today) {
      return ctx.reply(
        `–°–µ–≥–æ–¥–Ω—è –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç: üëÄ\n"${data.lastResponseText}". \n--------------\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ –∑–∞–≤—Ç—Ä–∞!‚è∞`
      );
    }

    if (!responses || !Array.isArray(responses)) {
      throw new Error('–ú–∞—Å—Å–∏–≤ responses –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.');
    }

    const randomResponse = responses[Math.floor(Math.random() * responses.length)];
    data.lastResponseDate = today;
    data.lastResponseText = randomResponse;
    await saveData(data);

    return ctx.reply(randomResponse);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ noorgooddayCommand:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
  }
}

module.exports = { noorgooddayCommand };