const messages = require('../utils/messages');
const { saveReaction } = require('../utils/stats');
const { setupCallbackHandlers } = require('./callbackQuery');

function setupInteractive(bot) {
  // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
  setupCallbackHandlers(bot);
  
  // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
  bot.action(/rate_(.+)_(.+)/, async (ctx) => {
    const [_, type, reaction] = ctx.match;
    saveReaction(type, reaction);
    await ctx.answerCbQuery(reaction === 'love' ? '–í–∞—à–∞ —Ä–∞–¥–æ—Å—Ç—å ‚Äî –Ω–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞! üòä' : '–°–ø–∞—Å–∏–±–æ –∑–∞ feedback!');
  });

  // 3. –§–∞–±—Ä–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const createMoreHandler = (type) => async (ctx) => {
    try {
      await ctx.deleteMessage();
      const message = messages[type][Math.floor(Math.random() * messages[type].length)];
      
      await ctx.replyWithHTML(
        `<b>${type === 'facts' ? '‚òï –ö–æ—Ñ–µ–π–Ω—ã–π —Ñ–∞–∫—Ç' : 
          type === 'jokes' ? 'üòÇ –®—É—Ç–∫–∞ –¥–Ω—è' : 
          'üí° –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç'}</b>\n\n${message.text} ${message.emoji}`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–ï—â—ë", callback_data: `more_${type}` }],
              [{ text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: "close" }]
            ]
          }
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ more action:', error);
    }
  };

  // 4. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  bot.action('more_facts', createMoreHandler('facts'));
  bot.action('more_jokes', createMoreHandler('jokes'));
  bot.action('more_tips', createMoreHandler('coffeeTips'));
  
  // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
  bot.action('close', async (ctx) => {
    await ctx.deleteMessage();
    await ctx.answerCbQuery('–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç');
  });

  // 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.action(/more_(.+)/, async (ctx) => {
    const type = ctx.match[1];
    if (messages[type]) {
      createMoreHandler(type)(ctx);
    }
  });
};
module.exports = {
  setupInteractive
};